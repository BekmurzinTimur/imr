{"version":3,"sources":["Header/Header.js","Info/Info.js","CountryCard/CountryCard.js","App.js","serviceWorker.js","index.js"],"names":["initialFiltersPassed","curFilters","Uncertainty","Year","Sort","Search","Header","props","updateFilters","updateCurFilters","filter","event","target","value","className","key","htmlFor","id","defaultValue","onChange","type","placeholder","Info","CountryName","yDomainBottom","yDomainTop","myData","x","y","undefined","countryInfo","name","Lower","Upper","Median","height","width","yType","xType","yDomain","style","bottom","fill","left","right","top","data","CountryCard","i","push","Math","max","min","mortality_rate","j","MortalityRateRaw","length","index","floor","ISOcode","currentIMRSample","setCurrentArray","year","yearIndex","Object","assign","filterArray","array","contains","toLowerCase","item","includes","App","newFilters","setState","sortSample","sortType","state","sort","a","b","nameA","nameB","toggleVisualization","oldState","visualization1","collectCountryInfo","makeCards","searchKey","cardFilter","rows","cardSearch","e","this","filters","setData","dataWithColor","map","d","color","Number","onClick","onNearestX","items","title","strokeWidth","orientation","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5efc7c18.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nlet initialFiltersPassed = false;\r\n\r\nlet curFilters = {\r\n    Uncertainty: 'Median',\r\n    Year: '2010',\r\n    Sort: 'Name',\r\n    Search: ''\r\n}\r\n\r\nfunction Header(props) {\r\n    // Pass current filters at the start\r\n    if (!initialFiltersPassed) {\r\n        props.updateFilters(curFilters);\r\n        initialFiltersPassed = true;\r\n    }\r\n    \r\n    const updateCurFilters = (filter,event) => {\r\n        curFilters[filter] = event.target.value;\r\n        props.updateFilters(curFilters);\r\n    }\r\n\r\n    return (\r\n      <div className=\"header\">\r\n        <h1>Infant Mortality Rate</h1>\r\n        <nav className=\"nav\">\r\n            <label key=\"label_year\" htmlFor=\"select_year\">Year    \r\n                <select key=\"select_year\" className=\"active_element\" id=\"select_year\"  defaultValue={curFilters.Year}\r\n                onChange={(event) => updateCurFilters('Year', event)}>\r\n                    <option value=\"2010\">2010</option>\r\n                    <option value=\"2011\">2011</option>\r\n                    <option value=\"2012\">2012</option>\r\n                    <option value=\"2013\">2013</option>\r\n                    <option value=\"2014\">2014</option>\r\n                    <option value=\"2015\">2015</option>\r\n                    <option value=\"2016\">2016</option>\r\n                    <option value=\"2017\">2017</option>\r\n                </select>\r\n            </label>\r\n            <label key=\"label_uncertainty\" htmlFor=\"select_uncertainty\">Uncertainty bounds\r\n                <select key=\"select_uncertainty\" className=\"active_element\" id=\"select_uncertainty\" defaultValue={curFilters.Uncertainty} \r\n                onChange={(event) => updateCurFilters('Uncertainty', event)}>\r\n                    <option value=\"Lower\">Lower</option>\r\n                    <option value=\"Median\">Median</option>\r\n                    <option value=\"Upper\">Upper</option>\r\n                </select>\r\n            </label>\r\n            <label htmlFor=\"select_sort\">Sort\r\n                <select className=\"active_element\" id=\"select_sort\" defaultValue={curFilters.Sort}\r\n                onChange={(event) => updateCurFilters('Sort', event)}>\r\n                    <option value=\"name\">Name</option>\r\n                    <option value=\"descending\">Descending</option>\r\n                    <option value=\"ascending\">Ascending</option>\r\n                </select>\r\n            </label>\r\n            <label htmlFor=\"filter_name\">Search \r\n                <input className=\"active_element\" type=\"text\" placeholder=\"Type Country Name\" defaultValue={curFilters.Search}\r\n                onChange={(event) => updateCurFilters('Search', event)}></input>\r\n            </label>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\nexport default Header;","import React from 'react'; \r\nimport {XYPlot, LineMarkSeries,VerticalGridLines,HorizontalGridLines,XAxis,YAxis, Borders} from 'react-vis';\r\n\r\nfunction Info(props) {\r\n    let CountryName = \"Blank\";\r\n    let yDomainBottom = 0;\r\n    let yDomainTop= 0;\r\n    let myData = [\r\n        {x: 'Lower', y: 0},\r\n        {x: 'Median', y: 0},\r\n        {x: 'Upper', y: 0},\r\n    ];\r\n\r\n    if (props.countryInfo !== undefined)\r\n    { \r\n      CountryName = props.countryInfo.name;\r\n      yDomainBottom = props.countryInfo.Lower;\r\n      yDomainTop = props.countryInfo.Upper;\r\n      myData = [\r\n          {x: 'Lower', y: props.countryInfo.Lower},\r\n          {x: 'Median', y: props.countryInfo.Median},\r\n          {x: 'Upper', y: props.countryInfo.Upper},\r\n      ];\r\n    }\r\n\r\n    return (\r\n      <div className=\"info_wrapper\">\r\n          <h2>{CountryName}</h2>\r\n            <XYPlot height={200} width={320} yType=\"linear\" xType=\"ordinal\" className=\"country_chart\" yDomain={[yDomainBottom,yDomainTop]}>\r\n                <VerticalGridLines />\r\n                <HorizontalGridLines />\r\n                <Borders style={{\r\n                  bottom: {fill: '#fff'},\r\n                  left: {fill: '#fff'},\r\n                  right: {fill: '#fff'},\r\n                  top: {fill: '#fff'}\r\n                }}/>\r\n                <XAxis />\r\n                <YAxis />\r\n                <LineMarkSeries data={myData}/>\r\n            </XYPlot>\r\n      </div>\r\n    );\r\n  }\r\nexport default Info;","import React from 'react';\nimport {XYPlot,LineMarkSeries, VerticalGridLines,HorizontalGridLines,XAxis,YAxis} from 'react-vis';\n\nfunction CountryCard(props) {\n    let data = {\n        Lower: [],\n        Median: [],\n        Upper: []\n    };\n\n    for (let i =0; i<=7; i++) {\n        data.Lower.push({ x: '201'+i, y:props.countryInfo.Lower[i]});\n        data.Median.push({ x: '201'+i, y:props.countryInfo.Median[i]});\n        data.Upper.push({ x: '201'+i, y:props.countryInfo.Upper[i]});\n    }\n    // Evaluate yAxis range \n    let yDomainBottom = Math.max(0, Math.min(...props.countryInfo.Lower) - 10);\n    let yDomainTop = Math.max(...props.countryInfo.Upper) + 10;\n\n    return <div className=\"cards_card\">\n            <h3>{props.countryInfo.name}</h3>\n            <XYPlot height={200} width={320} yType=\"linear\" xType=\"ordinal\" className=\"country_chart\" yDomain={[yDomainBottom,yDomainTop]}>\n                <VerticalGridLines />\n                <HorizontalGridLines />\n                <XAxis />\n                <YAxis />\n                <LineMarkSeries data={data.Lower}/>\n                <LineMarkSeries data={data.Median}/>\n                <LineMarkSeries data={data.Upper}/>\n            </XYPlot>\n    </div>\n}\n\nexport default CountryCard;","import React from 'react';\nimport './App.scss';\nimport '../node_modules/react-vis/dist/style.css';\nimport {XYPlot, VerticalBarSeries,VerticalGridLines,HorizontalGridLines,XAxis,YAxis, DiscreteColorLegend} from 'react-vis';\nimport MortalityRateRaw from './Assets/mortality_rate.json';\nimport Header from './Header/Header';\nimport Info from './Info/Info';\nimport CountryCard from './CountryCard/CountryCard';\n\n\nlet data = []; // array to pass to VerticalBarSeries.\n\n\n// Reordering data into new array in a more convinient way\nlet mortality_rate = [[],[],[],[],[],[],[],[]]; \nfor (let j = 0; j <= 7; j++) {\n  for (let i = 0; i < MortalityRateRaw.length; i++) {\n    let index = Math.floor(i/3);\n    mortality_rate[j][index] = {};\n  }\n}\nfor (let j = 0; j <= 7; j++) {\n  for (let i = 0; i < MortalityRateRaw.length; i++)\n  {\n    let index = Math.floor(i/3);\n    mortality_rate[j][index][ MortalityRateRaw[i]['Uncertainty bounds*']] = MortalityRateRaw[i]['201' + j];\n    mortality_rate[j][index].ISOcode = MortalityRateRaw[i][\"ISO Code\"];\n    mortality_rate[j][index].name = MortalityRateRaw[i][\"Country Name\"];\n  }\n}\n// currentIMRSample - filtered array that contains only chosen year and uncertainty bounds\nlet currentIMRSample = [];\n\nconst setCurrentArray = (year) => {\n  let yearIndex = year - 2010;\n  for (let i = 0; i < mortality_rate[yearIndex].length; i++)\n  {\n    currentIMRSample[i] = Object.assign(mortality_rate[yearIndex][i]);\n  }\n}\n// Parse data for VerticalBarSeries element\nconst setData = (array, filters) => {\n\n  data = [];\n  for (let i = 0; i < array.length; i++)\n  { \n    data[i] = {x: array[i].ISOcode, y: array[i][filters.Uncertainty], name: array[i].name};\n  }\n}\n// Filter sample that contains only string that had been typed into search textfield\nconst filterArray = (array, contains) => {\n  let filteredArray = [];\n  contains = contains.toLowerCase();\n  filteredArray = array.filter(function (item) {\n    let lowercaseItem = item.name.toLowerCase();\n\n    return lowercaseItem.includes(contains);\n  });\n  return filteredArray;\n}\n\n\nclass App extends React.Component{\n  constructor() {\n    super();\n    this.state = {\n      index: 0, // Index of hovered bar\n      curFilters: {\n        Uncertainty: 'Median',\n        Year: '2010',\n        Sort: 'Name',\n        Search: ''\n    },\n      visualization1: true, // switch to second visualization if false\n      cardFilter: '' // search filter for second visualization\n    };\n  }\n\n  updateFilters = (newFilters) => {\n    this.setState({curFilters: newFilters});\n  }  \n\n  \n  sortSample = (sortType) => {\n    // Get data into temporary array so we can filter it w/o losing data\n    setCurrentArray(this.state.curFilters.Year); \n    // Apply search filter\n    currentIMRSample = Object.assign([], filterArray(currentIMRSample, this.state.curFilters.Search));\n    // Sort what is left\n    let Uncertainty = this.state.curFilters.Uncertainty;\n    if (sortType === \"ascending\")\n    currentIMRSample.sort(function(a,b) {\n      return a[Uncertainty] - b[Uncertainty];\n    }); else\n    if (sortType === \"descending\") \n    currentIMRSample.sort(function(a,b) {\n      return b[Uncertainty] - a[Uncertainty];\n    }); \n    if (sortType === \"name\") {\n      currentIMRSample.sort(function(a, b){\n      var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()\n      if (nameA < nameB) //sort string ascending\n        return -1 \n      if (nameA > nameB)\n        return 1\n      return 0 //default return value (no sorting)\n    })\n    }\n  }\n\n  toggleVisualization = () => {\n    const oldState = this.state.visualization1;\n    this.setState({visualization1: !oldState});\n  }\n  // Viz #2\n  //Make an object that contains all information about single country\n  collectCountryInfo = (index) => {\n    let countryInfo = {\n      Lower: [],\n      Median: [],\n      Upper: [],\n      ISOcode: mortality_rate[0][index].ISOcode,\n      name: mortality_rate[0][index].name\n    }\n    for (let i = 0; i <= 7; i++)\n    {\n      countryInfo.Lower[i] = mortality_rate[i][index].Lower;\n      countryInfo.Median[i] = mortality_rate[i][index].Median;\n      countryInfo.Upper[i] = mortality_rate[i][index].Upper;\n    }\n    return countryInfo;\n  }\n\n  makeCards = () => {\n    let searchKey = this.state.cardFilter.toLowerCase();\n    let rows = [];\n    if (this.state.visualization1 === false)\n    {\n      for (let i = 0; i < 196; i++) {\n        //Apply search filter. If passes - add card\n        let countryName = mortality_rate[0][i].name.toLowerCase()\n        if (countryName.includes(searchKey))\n        rows.push(<CountryCard key={i} countryInfo={this.collectCountryInfo(i)}/>);\n      }\n    }\n    return <div className=\"cards_wrapepr\">{rows}</div>\n  }\n  // Make inout for card search\n  cardSearch = () => {\n    return (<div>\n      <label htmlFor=\"cardsearch\">Search\n        <input value={this.state.cardFilter} className=\"active_element\" type=\"text\" placeholder=\"Type country name\" id=\"cardsearch\" onChange={(e) => {\n          this.setState({cardFilter: e.target.value});\n        }}></input>\n      </label>\n    </div>)\n  }\n\nrender() {\n  const { index } = this.state; \n  this.sortSample(this.state.curFilters.Sort);\n  setData(currentIMRSample, this.state.curFilters);\n  // Make bar different color when hovered\n  const dataWithColor = data.map((d, i) => ({...d, color: Number(i !== index)}));\n  return (\n    <div className=\"App\">\n      <button className='toggle_button active_element' onClick={this.toggleVisualization}>Toggle visualization</button>\n      {/*Conditionaly render visualization */}\n      {this.state.visualization1 === true ? <div>\n        <Header updateFilters={this.updateFilters}/>\n        <div className=\"chart_wrapper\">\n          <XYPlot \n           height={250} \n           width={Math.max(200,30.61*currentIMRSample.length)}\n           xType=\"ordinal\" \n           yDomain={[0, 145]}>\n            <VerticalGridLines />\n            <HorizontalGridLines />\n            <XAxis />\n            <YAxis />\n            <VerticalBarSeries \n            data={dataWithColor} \n            //Get index of hovered element\n            onNearestX={(d, {index}) => this.setState({ index })}\n            />\n          </XYPlot>\n        </div>\n        <Info countryInfo={currentIMRSample[index]}/>\n        </div>\n        : <div>\n          {/*Second visualization */}\n          <h1>Infant Mortality Rate</h1>\n          {this.cardSearch()}\n          <DiscreteColorLegend \n                items={[{title: 'Lower', strokeWidth:4}, \n                {title: 'Median', strokeWidth:4}, \n                {title: 'Upper', strokeWidth:4}]}\n                orientation=\"horizontal\"/>\n          {this.makeCards()}\n        </div> \n      }\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}